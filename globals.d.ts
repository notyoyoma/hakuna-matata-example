
// GENERATED BY WEBPACK HAKUNA MATATA
import {
  OpenAPIClient,
  Parameters,
  UnknownParamsObject,
  OperationResponse,
  AxiosRequestConfig,
} from 'openapi-client-axios';
declare namespace Components {
  namespace RequestBodies {
    export type Pet = Schemas.Pet;
    export type UserArray = Schemas.User[];
  }
  namespace Schemas {
    export interface Address {
      /**
       * example:
       * 437 Lytton
       */
      street?: string;
      /**
       * example:
       * Palo Alto
       */
      city?: string;
      /**
       * example:
       * CA
       */
      state?: string;
      /**
       * example:
       * 94301
       */
      zip?: string;
    }
    export interface ApiResponse {
      code?: number; // int32
      type?: string;
      message?: string;
    }
    export interface Category {
      /**
       * example:
       * 1
       */
      id?: number; // int64
      /**
       * example:
       * Dogs
       */
      name?: string;
    }
    export interface Customer {
      /**
       * example:
       * 100000
       */
      id?: number; // int64
      /**
       * example:
       * fehguy
       */
      username?: string;
      address?: Address[];
    }
    export interface Order {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * 198772
       */
      petId?: number; // int64
      /**
       * example:
       * 7
       */
      quantity?: number; // int32
      shipDate?: string; // date-time
      /**
       * Order Status
       * example:
       * approved
       */
      status?: "placed" | "approved" | "delivered";
      complete?: boolean;
    }
    export interface Pet {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * doggie
       */
      name: string;
      category?: {
        /**
         * example:
         * 1
         */
        id?: number; // int64
        /**
         * example:
         * Dogs
         */
        name?: string;
      };
      photoUrls: string[];
      tags?: {
        id?: number; // int64
        name?: string;
      }[];
      /**
       * pet status in the store
       */
      status?: "available" | "pending" | "sold";
    }
    export interface Tag {
      id?: number; // int64
      name?: string;
    }
    export interface User {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * theUser
       */
      username?: string;
      /**
       * example:
       * John
       */
      firstName?: string;
      /**
       * example:
       * James
       */
      lastName?: string;
      /**
       * example:
       * john@email.com
       */
      email?: string;
      /**
       * example:
       * 12345
       */
      password?: string;
      /**
       * example:
       * 12345
       */
      phone?: string;
      /**
       * User Status
       * example:
       * 1
       */
      userStatus?: number; // int32
    }
  }
}
declare namespace Paths {
  namespace AddPet {
    export interface RequestBody {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * doggie
       */
      name: string;
      category?: {
        /**
         * example:
         * 1
         */
        id?: number; // int64
        /**
         * example:
         * Dogs
         */
        name?: string;
      };
      photoUrls: string[];
      tags?: {
        id?: number; // int64
        name?: string;
      }[];
      /**
       * pet status in the store
       */
      status?: "available" | "pending" | "sold";
    }
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * doggie
         */
        name: string;
        category?: {
          /**
           * example:
           * 1
           */
          id?: number; // int64
          /**
           * example:
           * Dogs
           */
          name?: string;
        };
        photoUrls: string[];
        tags?: {
          id?: number; // int64
          name?: string;
        }[];
        /**
         * pet status in the store
         */
        status?: "available" | "pending" | "sold";
      }
    }
  }
  namespace CreateUser {
    export interface RequestBody {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * theUser
       */
      username?: string;
      /**
       * example:
       * John
       */
      firstName?: string;
      /**
       * example:
       * James
       */
      lastName?: string;
      /**
       * example:
       * john@email.com
       */
      email?: string;
      /**
       * example:
       * 12345
       */
      password?: string;
      /**
       * example:
       * 12345
       */
      phone?: string;
      /**
       * User Status
       * example:
       * 1
       */
      userStatus?: number; // int32
    }
    namespace Responses {
      export interface Default {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * theUser
         */
        username?: string;
        /**
         * example:
         * John
         */
        firstName?: string;
        /**
         * example:
         * James
         */
        lastName?: string;
        /**
         * example:
         * john@email.com
         */
        email?: string;
        /**
         * example:
         * 12345
         */
        password?: string;
        /**
         * example:
         * 12345
         */
        phone?: string;
        /**
         * User Status
         * example:
         * 1
         */
        userStatus?: number; // int32
      }
    }
  }
  namespace CreateUsersWithListInput {
    export type RequestBody = {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * theUser
       */
      username?: string;
      /**
       * example:
       * John
       */
      firstName?: string;
      /**
       * example:
       * James
       */
      lastName?: string;
      /**
       * example:
       * john@email.com
       */
      email?: string;
      /**
       * example:
       * 12345
       */
      password?: string;
      /**
       * example:
       * 12345
       */
      phone?: string;
      /**
       * User Status
       * example:
       * 1
       */
      userStatus?: number; // int32
    }[];
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * theUser
         */
        username?: string;
        /**
         * example:
         * John
         */
        firstName?: string;
        /**
         * example:
         * James
         */
        lastName?: string;
        /**
         * example:
         * john@email.com
         */
        email?: string;
        /**
         * example:
         * 12345
         */
        password?: string;
        /**
         * example:
         * 12345
         */
        phone?: string;
        /**
         * User Status
         * example:
         * 1
         */
        userStatus?: number; // int32
      }
    }
  }
  namespace DeleteOrder {
    namespace Parameters {
      export type OrderId = number; // int64
    }
    export interface PathParameters {
      orderId: Parameters.OrderId; // int64
    }
  }
  namespace DeletePet {
    export interface HeaderParameters {
      api_key?: Parameters.ApiKey;
    }
    namespace Parameters {
      export type ApiKey = string;
      export type PetId = number; // int64
    }
    export interface PathParameters {
      petId: Parameters.PetId; // int64
    }
  }
  namespace DeleteUser {
    namespace Parameters {
      export type Username = string;
    }
    export interface PathParameters {
      username: Parameters.Username;
    }
  }
  namespace FindPetsByStatus {
    namespace Parameters {
      export type Status = "available" | "pending" | "sold";
    }
    export interface QueryParameters {
      status?: Parameters.Status;
    }
    namespace Responses {
      export type $200 = {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * doggie
         */
        name: string;
        category?: {
          /**
           * example:
           * 1
           */
          id?: number; // int64
          /**
           * example:
           * Dogs
           */
          name?: string;
        };
        photoUrls: string[];
        tags?: {
          id?: number; // int64
          name?: string;
        }[];
        /**
         * pet status in the store
         */
        status?: "available" | "pending" | "sold";
      }[];
    }
  }
  namespace FindPetsByTags {
    namespace Parameters {
      export type Tags = string[];
    }
    export interface QueryParameters {
      tags?: Parameters.Tags;
    }
    namespace Responses {
      export type $200 = {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * doggie
         */
        name: string;
        category?: {
          /**
           * example:
           * 1
           */
          id?: number; // int64
          /**
           * example:
           * Dogs
           */
          name?: string;
        };
        photoUrls: string[];
        tags?: {
          id?: number; // int64
          name?: string;
        }[];
        /**
         * pet status in the store
         */
        status?: "available" | "pending" | "sold";
      }[];
    }
  }
  namespace GetInventory {
    namespace Responses {
      export interface $200 {
        [name: string]: number; // int32
      }
    }
  }
  namespace GetOrderById {
    namespace Parameters {
      export type OrderId = number; // int64
    }
    export interface PathParameters {
      orderId: Parameters.OrderId; // int64
    }
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * 198772
         */
        petId?: number; // int64
        /**
         * example:
         * 7
         */
        quantity?: number; // int32
        shipDate?: string; // date-time
        /**
         * Order Status
         * example:
         * approved
         */
        status?: "placed" | "approved" | "delivered";
        complete?: boolean;
      }
    }
  }
  namespace GetPetById {
    namespace Parameters {
      export type PetId = number; // int64
    }
    export interface PathParameters {
      petId: Parameters.PetId; // int64
    }
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * doggie
         */
        name: string;
        category?: {
          /**
           * example:
           * 1
           */
          id?: number; // int64
          /**
           * example:
           * Dogs
           */
          name?: string;
        };
        photoUrls: string[];
        tags?: {
          id?: number; // int64
          name?: string;
        }[];
        /**
         * pet status in the store
         */
        status?: "available" | "pending" | "sold";
      }
    }
  }
  namespace GetUserByName {
    namespace Parameters {
      export type Username = string;
    }
    export interface PathParameters {
      username: Parameters.Username;
    }
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * theUser
         */
        username?: string;
        /**
         * example:
         * John
         */
        firstName?: string;
        /**
         * example:
         * James
         */
        lastName?: string;
        /**
         * example:
         * john@email.com
         */
        email?: string;
        /**
         * example:
         * 12345
         */
        password?: string;
        /**
         * example:
         * 12345
         */
        phone?: string;
        /**
         * User Status
         * example:
         * 1
         */
        userStatus?: number; // int32
      }
    }
  }
  namespace LoginUser {
    namespace Parameters {
      export type Password = string;
      export type Username = string;
    }
    export interface QueryParameters {
      username?: Parameters.Username;
      password?: Parameters.Password;
    }
    namespace Responses {
      export type $200 = string;
    }
  }
  namespace PlaceOrder {
    export interface RequestBody {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * 198772
       */
      petId?: number; // int64
      /**
       * example:
       * 7
       */
      quantity?: number; // int32
      shipDate?: string; // date-time
      /**
       * Order Status
       * example:
       * approved
       */
      status?: "placed" | "approved" | "delivered";
      complete?: boolean;
    }
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * 198772
         */
        petId?: number; // int64
        /**
         * example:
         * 7
         */
        quantity?: number; // int32
        shipDate?: string; // date-time
        /**
         * Order Status
         * example:
         * approved
         */
        status?: "placed" | "approved" | "delivered";
        complete?: boolean;
      }
    }
  }
  namespace UpdatePet {
    export interface RequestBody {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * doggie
       */
      name: string;
      category?: {
        /**
         * example:
         * 1
         */
        id?: number; // int64
        /**
         * example:
         * Dogs
         */
        name?: string;
      };
      photoUrls: string[];
      tags?: {
        id?: number; // int64
        name?: string;
      }[];
      /**
       * pet status in the store
       */
      status?: "available" | "pending" | "sold";
    }
    namespace Responses {
      export interface $200 {
        /**
         * example:
         * 10
         */
        id?: number; // int64
        /**
         * example:
         * doggie
         */
        name: string;
        category?: {
          /**
           * example:
           * 1
           */
          id?: number; // int64
          /**
           * example:
           * Dogs
           */
          name?: string;
        };
        photoUrls: string[];
        tags?: {
          id?: number; // int64
          name?: string;
        }[];
        /**
         * pet status in the store
         */
        status?: "available" | "pending" | "sold";
      }
    }
  }
  namespace UpdatePetWithForm {
    namespace Parameters {
      export type Name = string;
      export type PetId = number; // int64
      export type Status = string;
    }
    export interface PathParameters {
      petId: Parameters.PetId; // int64
    }
    export interface QueryParameters {
      name?: Parameters.Name;
      status?: Parameters.Status;
    }
  }
  namespace UpdateUser {
    namespace Parameters {
      export type Username = string;
    }
    export interface PathParameters {
      username: Parameters.Username;
    }
    export interface RequestBody {
      /**
       * example:
       * 10
       */
      id?: number; // int64
      /**
       * example:
       * theUser
       */
      username?: string;
      /**
       * example:
       * John
       */
      firstName?: string;
      /**
       * example:
       * James
       */
      lastName?: string;
      /**
       * example:
       * john@email.com
       */
      email?: string;
      /**
       * example:
       * 12345
       */
      password?: string;
      /**
       * example:
       * 12345
       */
      phone?: string;
      /**
       * User Status
       * example:
       * 1
       */
      userStatus?: number; // int32
    }
  }
  namespace UploadFile {
    namespace Parameters {
      export type AdditionalMetadata = string;
      export type PetId = number; // int64
    }
    export interface PathParameters {
      petId: Parameters.PetId; // int64
    }
    export interface QueryParameters {
      additionalMetadata?: Parameters.AdditionalMetadata;
    }
    namespace Responses {
      export interface $200 {
        code?: number; // int32
        type?: string;
        message?: string;
      }
    }
  }
}

export interface OperationMethods {
  /**
   * updatePet - Update an existing pet
   * 
   * Update an existing pet by Id
   */
  updatePet(
    parameters?: Parameters<UnknownParamsObject>,
    data?: Paths.UpdatePet.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.UpdatePet.Responses.$200>
  /**
   * addPet - Add a new pet to the store
   * 
   * Add a new pet to the store
   */
  addPet(
    parameters?: Parameters<UnknownParamsObject>,
    data?: Paths.AddPet.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.AddPet.Responses.$200>
  /**
   * findPetsByStatus - Finds Pets by status
   * 
   * Multiple status values can be provided with comma separated strings
   */
  findPetsByStatus(
    parameters?: Parameters<Paths.FindPetsByStatus.QueryParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.FindPetsByStatus.Responses.$200>
  /**
   * findPetsByTags - Finds Pets by tags
   * 
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   */
  findPetsByTags(
    parameters?: Parameters<Paths.FindPetsByTags.QueryParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.FindPetsByTags.Responses.$200>
  /**
   * getPetById - Find pet by ID
   * 
   * Returns a single pet
   */
  getPetById(
    parameters?: Parameters<Paths.GetPetById.PathParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetPetById.Responses.$200>
  /**
   * updatePetWithForm - Updates a pet in the store with form data
   */
  updatePetWithForm(
    parameters?: Parameters<Paths.UpdatePetWithForm.PathParameters & Paths.UpdatePetWithForm.QueryParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<any>
  /**
   * deletePet - Deletes a pet
   */
  deletePet(
    parameters?: Parameters<Paths.DeletePet.PathParameters & Paths.DeletePet.HeaderParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<any>
  /**
   * uploadFile - uploads an image
   */
  uploadFile(
    parameters?: Parameters<Paths.UploadFile.PathParameters & Paths.UploadFile.QueryParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.UploadFile.Responses.$200>
  /**
   * getInventory - Returns pet inventories by status
   * 
   * Returns a map of status codes to quantities
   */
  getInventory(
    parameters?: Parameters<UnknownParamsObject>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetInventory.Responses.$200>
  /**
   * placeOrder - Place an order for a pet
   * 
   * Place a new order in the store
   */
  placeOrder(
    parameters?: Parameters<UnknownParamsObject>,
    data?: Paths.PlaceOrder.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.PlaceOrder.Responses.$200>
  /**
   * getOrderById - Find purchase order by ID
   * 
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
   */
  getOrderById(
    parameters?: Parameters<Paths.GetOrderById.PathParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetOrderById.Responses.$200>
  /**
   * deleteOrder - Delete purchase order by ID
   * 
   * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
   */
  deleteOrder(
    parameters?: Parameters<Paths.DeleteOrder.PathParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<any>
  /**
   * createUser - Create user
   * 
   * This can only be done by the logged in user.
   */
  createUser(
    parameters?: Parameters<UnknownParamsObject>,
    data?: Paths.CreateUser.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.CreateUser.Responses.Default>
  /**
   * createUsersWithListInput - Creates list of users with given input array
   * 
   * Creates list of users with given input array
   */
  createUsersWithListInput(
    parameters?: Parameters<UnknownParamsObject>,
    data?: Paths.CreateUsersWithListInput.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.CreateUsersWithListInput.Responses.$200>
  /**
   * loginUser - Logs user into the system
   */
  loginUser(
    parameters?: Parameters<Paths.LoginUser.QueryParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.LoginUser.Responses.$200>
  /**
   * logoutUser - Logs out current logged in user session
   */
  logoutUser(
    parameters?: Parameters<UnknownParamsObject>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<any>
  /**
   * getUserByName - Get user by user name
   */
  getUserByName(
    parameters?: Parameters<Paths.GetUserByName.PathParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<Paths.GetUserByName.Responses.$200>
  /**
   * updateUser - Update user
   * 
   * This can only be done by the logged in user.
   */
  updateUser(
    parameters?: Parameters<Paths.UpdateUser.PathParameters>,
    data?: Paths.UpdateUser.RequestBody,
    config?: AxiosRequestConfig  
  ): OperationResponse<any>
  /**
   * deleteUser - Delete user
   * 
   * This can only be done by the logged in user.
   */
  deleteUser(
    parameters?: Parameters<Paths.DeleteUser.PathParameters>,
    data?: any,
    config?: AxiosRequestConfig  
  ): OperationResponse<any>
}

// export type Client = OpenAPIClient<OperationMethods>
declare const $hm: OpenAPIClient<OperationMethods>;